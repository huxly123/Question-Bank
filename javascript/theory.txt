1. What are the different data types present in javascript?
    a. Primitive types
       * String
       * Number
       * BigInt - This data type is used to store numbers which are above the limitation of the Number data type. It can store large integers and is represented by adding “n” to an integer literal.
         This is mainly used to compare two big numbers
         const bigIntA = BigInt(12345678901234567890);
         console.log(bigIntA); // 12345678901234567168n

       * Boolean
       * Undefined -  When a variable is declared but not assigned, it has the value of undefined and it’s type is also undefined.
         var x; // value of x is undefined
         var y = undefined; // we can also set the value of a variable as undefined

       * Null
       * Symbol - It is a new data type introduced in the ES6 version of javascript. It is used to store an anonymous and unique value.
         var symbol1 = Symbol('symbol');
         var symbol2 = Symbol('symbol');
         console.log(symbol1 === symbol2); // false

    b. Non-primitive types: (Object, Array, Function)
        Primitive data types can store only a single value. To store multiple and complex values, non-primitive data types are used.
        * Object - Used to store collection of data.
        * Type of Array is an Object
            // Collection of data in key-value pairs
                var obj1 = {
                x:  43,
                y:  "Hello world!",
                z: function(){
                    return this.x;
                }
                }
                    
            // Collection of data as an ordered list
                var array1 = [5, "Hello", true, 4.1]; 

2. Explain Hoisting in javascript.
    
    Hoisting is the default behaviour of javascript where all the variable and function declarations are moved on top.
    This means that irrespective of where the variables and functions are declared, they are moved on top of the scope. The 
    * Note - Variable initializations are not hoisted, only variable declarations are hoisted:
    ** Note - To avoid hoisting, you can run javascript in strict mode by using “use strict” on top of the code:


    Examples:

  a. hoistedVariable = 3;
     console.log(hoistedVariable); // outputs 3 even when the variable is declared after it is initialized	
     var hoistedVariable;

  b. hoistedFunction();  // Outputs " Hello world! " even when the function is declared after calling

     function hoistedFunction(){ 
     console.log(" Hello world! ");
     } 

  c. // Hoisting takes place in the local scope as well
     function doSomething(){
     x = 33;
     console.log(x); // 33
     var x;
     } 

  d. var x;
     console.log(x); // Outputs "undefined" since the initialization of "x" is not hoisted
     x = 23;

  e. "use strict";
     x = 23; // Gives an error since 'x' is not declared bcoz of 'use strict'
     var x; 

3. Difference between “ == “ and “ === “ operators.

     Both are comparison operators. The difference between both the operators is that “==” is used to compare values whereas,
     “ === “ is used to compare both values and types.

     Eg: 
     var x = 2;
     var y = "2";
     (x == y)  // Returns true since the value of both x and y is the same
     (x === y) // Returns false since the typeof x is "number" and typeof y is "string

4. Why do we use the word “debugger” in javascript?
    
    Debugger is used to stop a code at a particular line and allow to debug,. The remaining section of the code should stop execution before moving on to the next line while debugging.

5. Difference between var, let and const keyword in javascript.

    VAR:
     Scope: Variables declared with var are function-scoped. This means they are only visible within the function where they are declared, and they are not block-scoped.
     Hoisting: Variables declared with var are hoisted to the top of their scope. This means you can use the variable before it's declared in the code.
     Reassignment: Variables declared with var can be reassigned and updated.

     Eg:
     Scope, Hoisting
     function exampleVar() {
     if (true) {
        var x = 10;
        console.log(x); // 10
     }
     console.log(x); // 10
     }

     Reassignment
     function rr(){
     var y=0
     console.log(y);
     var y=1
     console.log(y);
     }
    rr()

    LET:
     Scope: Variables declared with let are block-scoped, which means they are only visible within the block (like if statements or loops) where they are declared.
     Hoisting: Variables declared with let are hoisted to the top of their block, but they are not initialized until the actual declaration statement is encountered in the code. This is known as the "temporal dead zone."
     Reassignment: Variables declared with let can be reassigned, but they can't be re-declared in the same scope.
     
     Eg:

     Scope, Hoisting
     function exampleLet() {
     if (true) {
         let y = 20;
         console.log(y); // 20
     }
     // console.log(y); // ReferenceError: y is not defined
     }

     Reassignment
     function rr(){
     let y=0
     console.log(y);
     let y=1
     console.log(y);
     }
     // SyntaxError: Cannot redeclare block-scoped variable

     CONST:
     Scope: Variables declared with const are block-scoped, similar to let.
     Hoisting: Like let, variables declared with const are hoisted to the top of their block, but they are not initialized until the declaration statement is encountered. The "temporal dead zone" also applies
     Reassignment: Variables declared with const cannot be reassigned after their initial assignment. They are constants.
     
     Scope, Hoisting
     function exampleConst() {
     if (true) {
         const z = 30;
         console.log(z); // 30
     }
     // console.log(y); // ReferenceError: y is not defined
     }

6. var vs let vs const exsmples:

   Scope:
   function exampleVarScope() {
    if (true) {
        var x = 10;
    }
    console.log(x); // 10 (accessible outside the block)
    }

    function exampleLetConstScope() {
    if (true) {
        let y = 20;
        const z = 30;
    }
    // console.log(y); // ReferenceError: y is not defined (block-scoped)
    // console.log(z); // ReferenceError: z is not defined (block-scoped)
    }

    Hoisting

    function exampleVarHoisting() {
    console.log(a); // undefined (variable is hoisted)
    var a = 5;
    }

    function exampleLetConstHoisting() {
    // console.log(b); // ReferenceError: Cannot access 'b' before initialization
    let b = 10;
    }

    Reassignment

    function exampleVarReassignment() {
    var x = 10;
    x = 20; // Reassignment is allowed
    console.log(x); // 20
    }

    function exampleLetReassignment() {
    let y = 30;
    y = 40; // Reassignment is allowed
    console.log(y); // 40
    }

    function exampleConstReassignment() {
    const z = 50;
    // z = 60; // TypeError: Assignment to constant variable
    console.log(z); // 50
    }

7. what is temporal deadzone

    The Temporal Dead Zone (TDZ) is a concept related to the hoisting behavior of variables declared with let and const in JavaScript.
    The Temporal Dead Zone is the period between entering scope and the actual variable declaration where accessing the variable results
    in a ReferenceError. During this time, the variable exists, but you cannot access its value.
    
    Eg:

    console.log(x); // ReferenceError: Cannot access 'x' before initialization
    let x = 5;

    console.log(y); // ReferenceError: Cannot access 'y' before initialization
    const y = 10;

    console.log(x); //undefined: Doesnt have temporal dead zone
    var x = 5;

8. Explain Implicit Type Coercion and explicit type in javascript.
   
    Implicit type coercion in javascript is the automatic conversion of value from one data type to another.
    It takes place when the operands of an expression are of different data types.

    Eg:
    // Implicit coercion from number to string
    const num = 5;
    const str = "The number is " + num; // "The number is 5"

    // Implicit coercion from string to number
    const strNum = "10";
    const sum = strNum + 5; // 15 (string "10" is coerced to a number)

    Explicit coercion, also known as type casting or type conversion, occurs when a developer
    explicitly converts a value from one type to another using built-in functions or operators. For example:
    
    // Explicit coercion from string to number
    const strNum = "10";
    const num = Number(strNum); // 10

    // Explicit coercion from number to string
    const num = 5;
    const str = String(num); // "5"

    Boolean Coercion:
    Boolean coercion takes place when using logical operators, ternary operators, if statements, and loop checks.
    To understand boolean coercion in if statements and operators, we need to understand truthy and falsy values.

    If statements:

    var x = 0;
    var y = 23;
            
    if(x) { console.log(x) }   // The code inside this block will not run since the value of x is 0(Falsy)  
            
    if(y) { console.log(y) }    // The code inside this block will run since the value of y is 23 (Truthy)

    Logical operators:

    OR ( | | ) operator - If the first value is truthy, then the first value is returned. Otherwise, always the second value gets returned.

    AND ( && ) operator - If both the values are truthy, always the second value is returned. If the first value is falsy then the first value is returned or if the second value is falsy then the second value is returned.

    var x = 220;
    var y = "Hello";
    var z = undefined;
            
    x | | y    // Returns 220 since the first value is truthy
            
    x | | z   // Returns 220 since the first value is truthy
            
    x && y    // Returns "Hello" since both the values are truthy
            
    y && z   // Returns undefined since the second value is falsy
            
    if( x && y ){ 
    console.log("Code runs" ); // This block runs because x && y returns "Hello" (Truthy)
    }   
            
    if( x || z ){
    console.log("Code runs");  // This block runs because x || y returns 220(Truthy)
    }

    Equality Coercion:

    var a = 12;
    var b = "12";
    a == b // Returns true because both 'a' and 'b' are converted to the same type and then compared. Hence the operands are equal.


    var a = 226;
    var b = "226";

    a === b // Returns false because coercion does not take place and the  operands are of different types. Hence they are not equal. 

9. Immutable vs Mutable types:

    Immutable types are stored as stack. (Primitive Data types).
    Whenever it is created by pointing to another variable a new space is generated for it.

    let a = 1

    let b = a
    a=4
    console.log(b); // 1


    Mutable Types are stored as Heap. (Non- primitive data types).
    Whenever it is created by pointing to another variable it refers to the reference of the variable. 

    let arr = [0, 1]
    let obj = {
        a: 1,
        b: 2
    }

    let arr2 = arr
    let obj2 = obj

    arr.push(1)
    obj['a'] = 2

    console.log(arr2, obj2); // [ 0, 1, 1 ] { a: 2, b: 2 }

10. Pass by Value vs Pass By Reference

    Pass by Value:
    If we pass a value(primitive data type) to a function, when we change the value of the argument it will not the change the
    actual value of the variable

    Eg:

    const a = 1

    function doSome(val){
    val ++
    console.log('in', val); // 2
    }
    
    doSome(a)
    console.log(a); // 1

    Pass By Reference:
    If we pass a reference(Non-primitive data type) to a function, when we change the value of the argument it will change the
    actual value of the variable

    Eg:

  1 const a = { val: 1 }

    function doSome(obj){
    obj.val = 2
    console.log('in', obj); // { val: 2 }
    }
    doSome(a)
    console.log(a); // { val: 2 }

  2 const a = [1,2]

    function doSome(obj){
    obj.push(4)
    console.log('in', obj); // [ 1, 2, 4 ]
    }
    doSome(a)
    console.log(a); // [ 1, 2, 4 ]

11. IIFE:(Immediately Invoked Function)
    
    An Immediately Invoked Function
    ( known as IIFE and pronounced as IIFY) is a function that runs as soon as it is defined.

    (function(){ 
    // Do something;
    })();

12. What is NaN property in JavaScript?

    NaN property represents the “Not-a-Number” value.
    It indicates a value that is not a legal number.

    To check if a value is NaN, we use the isNaN() function,

    Note- isNaN() function converts the given value to a Number type, and then equates to NaN.

    isNaN("Hello")  // Returns true
    isNaN(345)   // Returns false
    isNaN('1')  // Returns false, since '1' is converted to Number type which results in 0 ( a number) 
    isNaN(true) // Returns false, since true converted to Number type results in 1 ( a number)
    isNaN(false) // Returns false
    isNaN(undefined) // Returns true

    why typeof Nan is number bcoz if we conver "Hi" string to number like this Number("Hi") it return Nan

13. Explain Higher Order Functions in javascript.

    Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.
    
    EG:
    function higherOrder(fn) {
    fn();
    }
    
    higherOrder(function() { console.log("Hello world") });

    EG:
    function higherOrder2() {
    return function() {
        return "Do something";
    }
    }      
    var x = higherOrder2();
    x()   // Returns "Do something"

    EG:
    function higherOrder2() {
    return function() {
    console.log("Do something");
    }
    }      
    higherOrder2()() // "Do something"

    Built-in Higher-Order Functions:

    JavaScript provides built-in higher-order functions such as map, filter, and reduce on arrays.
    These functions take other functions as arguments and apply them to each element of the array.
    
    map: Calls a provided function once for each element in an array, and returns a new array with the results.

    eg:
    const numbers = [1, 2, 3];
    const squaredNumbers = numbers.map(function(x) {
    return x * x;
    });
    console.log(squaredNumbers); // Output: [1, 4, 9]


    filter: Creates a new array with all elements that pass the test implemented by the provided function.

    eg:
    const numbers = [1, 2, 3, 4, 5];
    const evenNumbers = numbers.filter(function(x) {
    return x % 2 === 0;
    });
    console.log(evenNumbers); // Output: [2, 4]


    reduce: Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.

    eg:

    const numbers = [1, 2, 3, 4, 5];
    const sum = numbers.reduce(function(accumulator, currentValue) {
    return accumulator + currentValue;
    }, 0);
    console.log(sum); // Output: 15


    forEach: Executes a provided function once for each array element.

    eg:
    const numbers = [1, 2, 3];
    numbers.forEach(function(x) {
    console.log(x);
    });
    // Output:
    // 1
    // 2
    // 3

    some: Checks if at least one element in the array passes the test implemented by the provided function.

    eg:
    const numbers = [1, 2, 3];
    const hasEven = numbers.some(function(x) {
    return x % 2 === 0;
    });
    console.log(hasEven); // Output: true

    every: Checks if all elements in the array pass the test implemented by the provided function.

    eg:
    const numbers = [2, 4, 6];
    const allEven = numbers.every(function(x) {
    return x % 2 === 0;
    });
    console.log(allEven); // Output: true

    find: Returns the first element in the array that satisfies the provided testing function.

    eg:
    const numbers = [1, 2, 3, 4, 5];
    const found = numbers.find(function(x) {
    return x > 3;
    });
    console.log(found); // Output: 4


    findIndex: Returns the index of the first element in the array that satisfies the provided testing function.

    eg:
    const numbers = [10, 20, 30, 40, 50];
    const index = numbers.findIndex(function(x) {
    return x > 25;
    });
    console.log(index); // Output: 2

    sort: Sorts the elements of an array in place and returns the sorted array.

    eg:
    const numbers = [3, 1, 5, 2, 4];
    numbers.sort(function(a, b) {
    return a - b;
    });
    console.log(numbers); // Output: [1, 2, 3, 4, 5]

    flatMap: Maps each element using a mapping function, then flattens the result into a new array.

    eg:
    const words = ["Hello", "World"];
    const chars = words.flatMap(function(word) {
    return word.split("");
    });
    console.log(chars); // Output: ["H", "e", "l", "l", "o", "W", "o", "r", "l", "d"]

14. What is this keyword:
    
    In JavaScript, the this keyword refers to the context within which a function is executed.
    The value of this depends on how a function is called, and it can have different meanings in different contexts.

    Global Context:

    console.log(this === window); // true (in a browser)

    Function Context:

    function greet() {
    console.log(this); // this refers to the global object
    }
    greet();

    const person = {
    name: "John",
    greet: function() {
        console.log(this.name); // this refers to the person object
    }
    };
    person.greet();

    This in Arrow Function:
    
    In arrow function the this keyword will not take the instance of where it defined, but
    it will take the lexical scope instance.

    const obj = {
    a: 1,
    greet: () => {
        console.log(this);
    },
    };

    obj.greet(); // global Object

    const obj = {
    a: 1,
    greet: function () {
        const y = () => {
        console.log(this);
        };
        y();
    },
    };

    obj.greet(); // { a: 1, greet: [Function: greet] } (This is the lexical environment scope)

15. Explain call(), apply() and, bind() methods.

    call():

    The call method allows you to call a function with a specified this value and individual arguments passed as separate arguments.

    const person = {
    name: "John",
    greet: function(message) {
        console.log(`${message}, ${this.name}!`);
    }
    };

    const otherPerson = { name: "Jane" };

    // Calling greet with 'person' as 'this' and passing 'Hello' as argument
    person.greet.call(otherPerson, "Hello");
    // Output: Hello, Jane!

    apply():

    The apply method is similar to call, but it takes arguments as an array.

    const person = {
    name: "John",
    greet: function(message, message2) {
        console.log(`${message}, ${this.name} ${this.age} ${message2}!`)
    }
    };

    const otherPerson = { name: "Jane", age: 24 };
    person.greet.apply(otherPerson, ["Hello", 'Bye!']); // Hello, Jane 24 Bye!!

    bind():

    The bind method creates a new function that, when called, has its this
    value set to a specific object, and with any specified arguments.

    const person = {
        name: "John",
        greet: function(message, message2) {
            console.log(`${message}, ${this.name} ${this.age} ${message2}!`);
        }
        };

    const obj= {
        name: 'Akshaya',
        age: 30
    }

    const getGreet = person.greet.bind(obj)

    getGreet('hi', 'bye') // hi, Akshaya 30 bye!

16. What is currying in JavaScript
    
    Currying is a functional programming technique in JavaScript where a function with multiple arguments is transformed 
    into a sequence of functions, each taking a single argument. This allows you to partially apply the function with
    one or more arguments, creating a new function with the remaining arguments.
 
    eg:1
    function add(x) {
    return function(y) {
        return x + y;
    };
    }

    const addFive = add(5); // Partial application
    console.log(addFive(3)); // Output: 8

    eg:2
    const add = (x, y) => x + y;
    const curriedAdd = x => y => add(x, y);

    const addFive = curriedAdd(5);
    console.log(addFive(3)); // Output: 8

    eg:3
    function multiply(x) {
    return function(y) {
        return function(z) {
        return x * y * z;
        };
    };
    }

    console.log(multiply(2)(3)(4)); // Output: 24

    eg:4

    const formatCurrency = currencySymbol => amount => `${currencySymbol}${amount.toFixed(2)}`;

    const formatUSD = formatCurrency("$");
    console.log(formatUSD(10.5)); // Output: $10.50

17. what is closures in javascript


    A closure in JavaScript is the combination of a function bundled together with references to its
    surrounding state (the lexical environment). It allows a function to access and manipulate variables 
    from its outer scope even after the outer function has finished executing.

    function outerFunction() {
    const outerVariable = 'I am from outer function';

    function innerFunction() {
        console.log(outerVariable); // Accessing outerVariable from outer scope
    }

    return innerFunction; // Returning inner function
    }

    const innerFunc = outerFunction(); // Calling outerFunction returns innerFunction

    innerFunc(); // Calling innerFunction accesses outerVariable through closure
    // Output: I am from outer function

18. Shallow copy vs Deep copy
    
    Shallow Copy:

    A shallow copy is a copy that only goes one level deep. In other words,
    it copies the object and all its properties, but any nested objects or arrays 
    will still reference the same memory location as the original object. 
    It means that if you make changes to the nested object,
    it will also affect the original object, as well as the copied object.

    Example:

    const originalObject = { a: 1, b: { c: 2,d: { e:  4}} };
    const shallowCopy = { ...originalObject };

    shallowCopy.a=2
    shallowCopy.b.c =3
    shallowCopy.b.d.e =5
    console.log(originalObject, shallowCopy);
    // { a: 1, b: { c: 3, d: { e: 5 } } } { a: 2, b: { c: 3, d: { e: 5 } } }

    Deep Copy:
    
    A deep copy is a copy that creates a new object with new memory 
    locations for all of its properties and nested objects or arrays. 
    It means that if you make changes to the copied object or any of its 
    nested objects or arrays, it will not affect the original object.

    const originalObject2 = { a: 1, b: { c: 2,d: { e:  4}} };
    const deepCopy = JSON.parse(JSON.stringify(originalObject2));
    deepCopy.a=2
    deepCopy.b.c =3
    deepCopy.b.d.e =5
    console.log(originalObject2, deepCopy);
    //{ a: 1, b: { c: 2, d: { e: 4 } } } { a: 2, b: { c: 3, d: { e: 5 } } }
    
19. spread operator vs rest operator

  ******* Spread will divide all the elements inside an array into single elements *******
  ******** rest will combine all the data and make it as an array ********

  Spread operator:

    The spread operator was introduced in JavaScript with ES 6, 
    which adds several great features that make working with arrays 
    and function parameters easier. As the name suggests, the spread operator “spreads” 
    the values in an array or a string across one or more arguments. 

    Eg:

    1) const a = [1,2,3];
    const b = [3,4,5];
    const c = [...a , ...b];
    console.log(c); // [1,2,3,4,5,6]

    2) const myLocations = ["Delhi", "Hyderabad"]
    const friendsLocations = ["Mumbai", ...myLocations, "Banglore"];
    console.log(friendsLocations) // ['Mumbai', 'Delhi', 'Hyderabad', 'Banglore']

    const collegeName = "IIT DELHI";
    ******* Spread will divide all the elements inside an array into single elements
    console.log([...collegeName]) // ['I', 'I', 'T', ' ', 'D', 'E', 'L', 'H', 'I']

    3) const functionArgs = [1,2,3,4];

    function multiplyNumbers (a, b, c, d) {
        return a*b*c*d;
    }

    console.log(multiplyNumbers(...functionArgs)); // 24

    4) const name = { firstName: "Eshaan", lastName: "Sharma" };
    const bio = { ...name, job: "SDE1" };

    console.log(bio.firstName);// Eshaan

    5) const firstObj = {
    "firstName" : "Eshaan",
    "lastName" : "Sharma"
    }

    const secondObj = {
        ...firstObj,
        "age" : "22"
    }

    console.log(secondObj.firstName);// Eshaan


  Rest operator:
    A rest operator is a type of parameter that gets all of the remaining parameters of a 
    function call via an Array. It enables us to handle a variety of inputs as parameters 
    in a function. Because it is used to combine many items, the rest operator is very helpful 
    during array and object destructuring.

    Eg:

    1) function testRest(...values) {
    return values;
    }
  ******** rest will combine all the data and make it as an array ********
    console.log(testRest("Eshaan", "Rahul")) // ["Eshaan","Rahul"]

    2) const [firstName, secondName, ...otherInfo] = 
    ["Rahul", "Mahajan", "Web developer", "Google India", "Male"];

    console.log(otherInfo); // ["Web developer", "Google India", "Male"]

    3)function multipleArg(... args) {
	let finalArray = args.map(ele => ele * 2);
	console.log(finalArray);
    }
    multipleArg(1, 2); // [2, 4]
    multipleArg(4, 2, 4); // [8, 4, 8]

  Spread vs rest:

    1)function spreadAndRest (firstArg, secondArg, ...otherArgs) {
	console.log(firstArg, secondArg);
    console.log(otherArgs);
    }

    spreadAndRest(...[1,2,3,4,5,6]);
    // 1 2
    // [ 3, 4, 5, 6 ]

    console.log(...[1,2,3,4,5,6]); // 1 2 3 4 5 6 (spread)

20. Slice vs splice

    Slice:

    The term slice literally means to cut something into pieces. 
    It is used to cut out elements from an array. It does not affect the original array.

    array.slice(start, end)

    start denotes the index at which the array starts slicing.
    end denotes the index at which the array stops slicing.(doesn't includes the last index in output)

    Eg:

    let arr = [
    "educative",
    4,
    [1,3],
    {type: "animal"}
    ];
    let slicedValues = arr.slice(1,3);

    console.log(slicedValues); // [ 4, [ 1, 3 ] ]

    Splice:
    ***** splice will modify the array *****
    Splice, according to the dictionary, means to join things together. 
    It is used to remove elements from an array or replace them.

    array.splice(start, deleteCount, newElem1, newElem2, ..., newElemN);

    start denotes the index from which the method will start its operation on the array.

    deleteCount denotes the number of values to be deleted from the start. 
    If the value is 0, nothing will be deleted.

    newElem1 to newElemN denote the values that would be added after the start.

    Eg:

    let arr1 = [145, 'hi', 142]

    let arr2 = arr0.splice(1,1,"hello", 'hey')

    console.log(arr1, arr2); [ 145, 'hello', 'hey', 142 ] -> arr1  [ 'hi' ] -> arr2(it will return affected element)

21. Event Bubbling vs Event Capturing:

    Event Bubbling: (default in browser)

    Event bubbling is an order of event happening from child to parent, it means event bubbles out from child to parent

    Example:

    a)document.querySelector("#grandparent").addEventListener('click',(e)=>{
    console.log('grandparent');
    }, false) // false => capturing will not happen

    document.querySelector("#parent").addEventListener('click',(e)=>{
        console.log('parent');
    }, false) // false => capturing will not happen

    document.querySelector("#child").addEventListener('click',(e)=>{
        console.log('child');
    }, false) // false => capturing will not happen

    output:

    child, parent, grandparent


    Event Capturing:

    Event Capturing is an order of event happening from parent to child.

    Example:

    a)document.querySelector("#grandparent").addEventListener('click',(e)=>{
    console.log('grandparent');
    }, true) // true => capturing will happen

    document.querySelector("#parent").addEventListener('click',(e)=>{
        console.log('parent');
    }, true) // true => capturing will happen

    document.querySelector("#child").addEventListener('click',(e)=>{
        console.log('child');
    }, true) // true => capturing will happen

     output:

    grandparent, parent, child


    StopPropagation:

    StopPropagation will stop the event action to pass after that component, it can be applied in event bubbling, event capturing.

    a)document.querySelector("#grandparent").addEventListener('click',(e)=>{
    console.log('grandparent');
    }, false) // false => capturing will not happen

    document.querySelector("#parent").addEventListener('click',(e)=>{
        e.stopPropagation()
        console.log('parent');
    }, false) // false => capturing will not happen

    document.querySelector("#child").addEventListener('click',(e)=>{
        console.log('child');
    }, false) // false => capturing will not happen

    output:

    child, parent


    b).querySelector("#grandparent").addEventListener('click',(e)=>{
    console.log('grandparent');
    }, true) // true => capturing will not happen

    document.querySelector("#parent").addEventListener('click',(e)=>{
        e.stopPropagation()
        console.log('parent');
    }, true) // true => capturing will not happen

    document.querySelector("#child").addEventListener('click',(e)=>{
        console.log('child');
    }, false) // true => capturing will not happen

    output:

    grandparent, parent

    c)document.querySelector("#grandparent").addEventListener('click',(e)=>{
    e.stopPropagation()
    console.log('grandparent');
    }, true) // true => capturing will not happen

    document.querySelector("#parent").addEventListener('click',(e)=>{
        console.log('parent');
    }, false) // true => capturing will not happen

    document.querySelector("#child").addEventListener('click',(e)=>{
        console.log('child');
    }, false) // true => capturing will not happen

    output:

    grandparent

    ******* we should always look for bubbling and capturing order for stop propogation from parent to child order in DOM  *******

22. What is Polyfill
    A polyfill is a piece of code (usually JavaScript) that provides modern functionality to older browsers or environments
    that do not natively support it. Essentially, it "fills in the gap" by mimicking the behavior of newer features in environments 
    that lack them.
    The Array.prototype.includes method was introduced in ES6 (2015). Older browsers like Internet Explorer do not support it.

    if (!Array.prototype.includes) {
    Array.prototype.includes = function (searchElement, fromIndex) {
        // Convert the array-like object to an array
        const arr = this;

        // Set the starting index
        const start = fromIndex || 0;

        // Iterate through the array
        for (let i = Math.max(start, 0); i < arr.length; i++) {
        if (arr[i] === searchElement) {
            return true;
        }
        }

        return false;
    };
    }

23. Explain Reduce Function
    
    array.reduce(callback, initialValue)

    callback = (accumulator, currentIndexValue) =>{}

    callback will have two argument accumulator and currentIndexValue, the reduce fn will loop through the array and execute the callback 
    fn and store the returning value in accumulator in every loop. at last it will return the accumulator.
    
    The initialValue will give initialValue to the accumulator at the start of the loop

    const arr = [10, 20, 30];
    const res = arr.reduce((acc, curr) => {
    return acc + curr;
    }, 0);
    console.log(res); // 60

    const nested = [
    [1, 2],
    [2, 4],
    ];
    const res1 = nested.reduce((acc, curr) => {
    return acc.concat(curr);
    }, []);
    console.log(res1); // [ 1, 2, 2, 4 ]

24. Write Polyfill of reduce
    
    if (!Array.prototype.reduc1) {
    Array.prototype.reduc1 = function (callback, initialValue) {
        if (typeof callback !== "function") {
        throw new TypeError("Callback must be a function");
        }

        const array = this;
        const length = array.length;
        let accumulator = initialValue !== undefined ? initialValue : array[0];

        for (let i = initialValue !== undefined ? 0 : 1; i < length; i++) {
        if (i in array) {
            accumulator = callback.call(undefined, accumulator, array[i], i, array);
        }
        }

        return accumulator;
    };
    }

25. Define Classes in JS
  
        A class in JavaScript is a blueprint for creating objects that share the same properties and methods.
        Classes encapsulate data (properties) and behavior (methods), making code more organized and reusable
        classes are primarily syntactic sugar over JavaScript's existing prototype-based inheritance model.

        class Person {
        constructor(name, age) {
            this.name = name; // Property
            this.age = age;   // Property
        }

        greet() { // Method
            console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
        }
        }

        const person1 = new Person("Alice", 25);
        person1.greet(); // Output: Hello, my name is Alice and I am 25 years old.

    Static methods:

        Static methods are defined on the class itself, not on its instances. 
        They are used for utility functions that don't depend on instance-specific data.

        class MathUtils {
        static add(a, b) {
            return a + b;
        }
        }

        console.log(MathUtils.add(5, 10)); // Output: 15

    Getters and Setters:

        Classes can define custom accessors for properties using get and set.

        class Circle {
        constructor(radius) {
            this.radius = radius;
        }

        get diameter() {
            return this.radius * 2;
        }

        set diameter(diameter) {
            this.radius = diameter / 2;
        }
        }

        const circle = new Circle(10);
        console.log(circle.diameter); // Output: 20
        circle.diameter = 30;
        console.log(circle.radius);   // Output: 15

    Private Members:

        Private members are properties or methods that are accessible only within the class where they are defined. 
        They cannot be accessed or modified outside of the class.

        class Example {
        #privateProperty = "I am private";
    
        #privateMethod() {
        console.log(this.#privateProperty);
        }
    
        publicMethod() {
        this.#privateMethod(); // Accessing private method
        }
        }
        
        const obj = new Example();
        obj.publicMethod();        // Output: I am private
        console.log(obj.#privateProperty); // Error: Private field '#privateProperty' must be declared in an enclosing class

    Static Members:

        Static members are properties or methods that belong to the class itself, not to any specific instance of the class. 
        These can only be accessed using the class name, not through instances.

        class Example {
        static staticProperty = "I am static";

        static staticMethod() {
            console.log(this.staticProperty);
        }
        }

        Example.staticMethod();          // Output: I am static
        const obj = new Example();
        console.log(obj.staticProperty); // Output: undefined (cannot access static property via instance)

26. Inheritance in JavaScript

    1) Prototype-Based Inheritance
    2) Class-Based Inheritance

    Prototype-Based Inheritance:

        In JavaScript, every object has an internal property called [[Prototype]], which links it to another object
        This linkage forms a "prototype chain" that allows an object to access properties and methods defined in its prototype.
        Uses the Object.create() method or __proto__ to establish inheritance.
        Objects inherit properties and methods directly from other objects.

        const parent = {
        greet() {
            console.log("Hello from parent");
        },
        };

        const child = Object.create(parent);
        child.greet(); // Output: Hello from parent

        console.log(child.__proto__ === parent); // Output: true

    Class-Based Inheritance:

        class-based inheritance allows you to use the class and extends keywords to define inheritance
        Classes can inherit from other classes using the extends keyword.
        The super keyword allows access to the parent class's constructor and methods.

        class Animal {
        constructor(name) {
            this.name = name;
        }

        speak() {
            console.log(`${this.name} makes a noise.`);
        }
        }

        class Dog extends Animal {
        speak() {
            console.log(`${this.name} barks.`);
        }
        }

        const dog = new Dog("Rex");
        dog.speak(); // Output: Rex barks.

    super Keyword:

    In the constructor of a child class, super is used to call the parent class's constructor.
    This is required when extending a class because the child class must initialize the parent 
    class's properties before it can use this.

        class Parent {
        constructor(name) {
            this.name = name;
        }

        greet() {
            console.log(`Hello from ${this.name}`);
        }
        }

        class Child extends Parent {
        constructor(name, age) {
            super(name); // Call parent constructor
            this.age = age;
        }

        greet() {
            super.greet(); // Call parent method
            console.log(`I am ${this.age} years old.`);
        }
        }

        const child = new Child("Alice", 10);
        child.greet();
        // Output:
        // Hello from Alice
        // I am 10 years old.

27. Object.create() vs Object.assign()

    Object.create():

    This method will create an empty object and copy other object methods and will store it inside the 
    prototype

    const proto = {
    greet() {
        console.log("Hello");
    },
    };
    const obj = Object.create(proto);
    console.log(obj); // {}

    console.log(Object.getPrototypeOf(obj)); // { greet: [Function: greet] }

    obj.greet(); // Logs: "Hello"

    Object.assign():

    Copies properties from one or more source objects to a target object.

    Object.assign(target, ...sources)

    const target = { a: 1 };
    const source = { b: 2, c: 3 };
    Object.assign(target, source);

    console.log(target); // { a: 1, b: 2, c: 3 }

28. Explain new keyword

    New keyword is used to create instances of objects defined by constructor functions.
    Create a New Object -> Set the Prototype -> Bind this -> Return the Object
    if we use this inside a normal function we need to use new keyword to bind the values to this

    function Person(name, age) {
    this.name = name;
    this.age = age;
    }

    const john = new Person("John", 25);
    console.log(john.name); // "John"

    class Animal {
    constructor(type) {
        this.type = type;
    }

    speak() {
        console.log(`I am a ${this.type}`);
    }
    }

    const dog = new Animal("Dog");
    dog.speak(); // "I am a Dog"

    The new keyword is used with built-in objects like Date, RegExp, Map, etc.

    const today = new Date();
    console.log(today);

    const regex = new RegExp("\\w+");
    console.log(regex.test("word")); // true

29. Generator Function

    Generator functions are special functions in JavaScript that allow you to pause and resume execution at specific points.
    They provide a powerful way to work with iterators and lazy evaluation.

    function* myGenerator() {
    yield 1;
    yield 2;
    yield 3;
    }
    const gen = myGenerator(); // Returns an iterator
    console.log(gen.next()); // { value: 1, done: false }
    console.log(gen.next()); // { value: 2, done: false }
    console.log(gen.next()); // { value: 3, done: false }
    console.log(gen.next()); // { value: undefined, done: true }

    Use case: 

    function* infiniteNumbers() {
    let num = 1;
    while (true) {
        yield num++;
    }
    }

    const numbers = infiniteNumbers();
    console.log(numbers.next().value); // 1
    console.log(numbers.next().value); // 2
    console.log(numbers.next().value); // 3

    Feature:	                       Regular Functions:	                        Generator Functions:

    Execution                          Run from start to finish                     Can pause and resume
    Return Value                       Single value or undefined                    Iterator object
    Syntax	                           function	                                    function*

30. Promise

    A Promise in JavaScript is like a guarantee that you'll get a result in the future.
    It helps handle asynchronous tasks, like fetching data from an API.

    Pending: The promise is still working (like waiting for a delivery).
    Fulfilled: The task was successful (delivery arrived).
    Rejected: The task failed (delivery was canceled).
    You use .then() to handle success, .catch() for errors, and .finally() for anything
    you want to do when the task is finished, no matter the result.

    const promise = new Promise((resolve, reject) => {
    const isSuccessful = true;
    setTimeout(() => {
        isSuccessful ? resolve("Success!") : reject("Error!");
    }, 1000);
    });

    promise
    .then((result) => console.log(result)) // Logs "Success!" if resolved
    .catch((error) => console.error(error)) // Logs "Error!" if rejected
    .finally(() => console.log("Task completed.")); // Runs no matter what

    1)Promise.race():

    Promise.race resolves or rejects as soon as one of the promises in the array resolves or rejects.

    const promise1 = new Promise((resolve) => setTimeout(resolve, 100, "Fast"));
    const promise2 = new Promise((resolve) => setTimeout(resolve, 500, "Slow"));

    Promise.race([promise1, promise2])
    .then((value) => {
        console.log("First resolved:", value); // Logs: "First resolved: Fast"
    })
    .catch((error) => {
        console.error("Error:", error);
    });

    2)Promise.all():

    Promise.all runs multiple promises in parallel and resolves when all promises are fulfilled. 
    If any promise fails (rejects), the entire Promise.all rejects immediately.

    Use Case: Ideal when you need all tasks completed before proceeding.

    const promise1 = new Promise((res, rej) => {
    setTimeout(() => {
        res("10");
    }, 1000);
    });
    const promise2 = new Promise((res, rej) => {
    setTimeout(() => {
        res("20");
    }, 10);
    });
    const promise3 = new Promise((res, rej) => {
    setTimeout(() => {
        res("30");
    }, 100);
    });

    Promise.all([promise1, promise2, promise3])
    .then((results) => {
        console.log(results); // [10, 20, 30] OR if one promise rejected then output is (One of the promises failed: 30)
    })
    .catch((error) => {
        console.error("One of the promises failed:", error);
    });

    3)Promise allSettled:

    Promise.allSettled runs multiple promises in parallel and resolves when all promises 
    settle (either fulfilled or rejected). It never rejects; instead, it provides an array of results for all promises.

    Use Case: Ideal when you need results of all tasks regardless of success or failure.

    const promise1 = new Promise((res, rej) => {
    setTimeout(() => {
        res("10");
    }, 1000);
    });
    const promise2 = new Promise((res, rej) => {
    setTimeout(() => {
        res("20");
    }, 10);
    });
    const promise3 = new Promise((res, rej) => {
    setTimeout(() => {
        rej("30");
    }, 100);
    });

    Promise.allSettled([promise1, promise2, promise3])
    .then((results) => {
        console.log(results);
    })
    .catch((error) => {
        console.error("One of the promises failed:", error);
    });

  //  [
  //  { status: 'fulfilled', value: '10' },
  //  { status: 'fulfilled', value: '20' },
  //  { status: 'rejected', reason: '30' }
  //  ]

    4) Promise.any():

    Promise.any resolves as soon as the first promise is fulfilled. If all promises reject, it returns an AggregateError with all rejection reasons.

    Use Case: Use when you need any one successful result.

    const promise1 = new Promise((res, rej) => {
    setTimeout(() => {
        res("10");
    }, 1000);
    });
    const promise2 = new Promise((res, rej) => {
    setTimeout(() => {
        res("20");
    }, 10);
    });
    const promise3 = new Promise((res, rej) => {
    setTimeout(() => {
        res("30");
    }, 100);
    });

    Promise.any([promise1, promise2, promise3])
    .then((result) => {
        console.log("First successful result:", result); // "Success in promise2"
    })
    .catch((error) => {
        console.error("All promises failed:", error.errors);
    });

31. What is Infinite Currying in JavaScript?

     Infinite currying allowing an indefinite number of function calls, where each call passes one argument.

    function add(a) {
    return function (b) {
        if (b !== undefined) {
        return add(a + b); // Keeps currying if more arguments are passed
        }
        return a; // Returns the final value when no argument is passed
    };
    }

    // Usage
    console.log(add(1)(2)(3)(4)()); // 10
    console.log(add(10)(20)(30)()); // 60

32. HOF that modify or unmodify the original array

    HOF That modifies the array:

    push()	Adds one or more elements to the end of the array.	New length of the array.
    pop()	Removes the last element of the array.	The removed element.
    shift()	Removes the first element of the array.	The removed element.
    unshift()	Adds one or more elements to the beginning of the array.	New length of the array.
    splice()	Adds/removes/replaces elements in the array at a specific index.	An array of removed elements.
    sort()	Sorts the array in place based on a comparison function.	The sorted array (mutated).
    reverse()	Reverses the order of elements in the array.	The reversed array (mutated).
    copyWithin()	Copies a sequence of array elements within the array itself.	The modified array.
    fill()	Fills all or part of the array with a static value.	The modified array.

    HOF That Not modifies the array:

    map()	Transforms each element of the array based on a callback function and returns a new array.	A new array.
    filter()	Returns a new array containing elements that pass the callback's condition.	A new array.
    reduce()	Reduces the array to a single value based on the callback function.	A single value.
    reduceRight()	Like reduce(), but processes the array from right to left.	A single value.
    concat()	Merges one or more arrays or values into a new array.	A new array.
    slice()	Extracts a portion of the array into a new array without modifying the original.	A new array.
    flat()	Flattens nested arrays into a new array.	A new array.
    flatMap()	Maps and flattens the array in one step, returning a new array.	A new array.
    join()	Concatenates array elements into a string with a specified delimiter.	A string.
    find()	Returns the first element that matches the condition in the callback function.	The found element (or undefined).
    findIndex()	Returns the index of the first element that matches the condition in the callback.	Index of the found element (-1 if none).
    every()	Checks if all elements pass the callback's condition.	true or false.
    some()	Checks if at least one element passes the callback's condition.	true or false.
    includes()	Checks if the array contains a specified value.	true or false.
    indexOf()	Returns the index of the first occurrence of a value in the array.	Index (or -1 if not found).
    lastIndexOf()	Returns the index of the last occurrence of a value in the array.	Index (or -1 if not found).

